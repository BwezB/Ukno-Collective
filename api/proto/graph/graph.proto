syntax = "proto3";

// Package graph provides services for managing graph-based knowledge representation
package graph;
option go_package = "github.com/BwezB/Wikno-backend/api/proto/graph";

// SearchRequest represents a search query for finding entities, connection types, or property types.
message SearchRequest {
    // Name to search for (case-sensitive exact match)
    // Maximum length: 255 characters
    // Required field
    // Example: "Person" or "worksAt"
    string name = 1;
}

// EntitiesList represents a collection of entities matching a search query.
message EntitiesList {
    // List of entities matching the search criteria
    // May be empty if no matches are found
    repeated UsersEntity entities = 1;
}

// ConnectionTypesList represents a collection of connection types matching a search query.
message ConnectionTypesList {
    // List of connection types matching the search criteria
    // May be empty if no matches are found
    repeated UsersConnectionType connection_types = 1;
}

// PropertyTypesList represents a collection of property types matching a search query.
message PropertyTypesList {
    // List of property types matching the search criteria
    // May be empty if no matches are found
    repeated UsersPropertyType property_types = 1;
}

// UserRequest represents a request to create a new user in the graph service.
message UserRequest {
    // Unique identifier for the user
    // Format: UUID v4
    // Required field
    // Example: "123e4567-e89b-12d3-a456-426614174000"
    string id = 1;
}

// UserData represents all graph data associated with a user.
message UserData {
    // List of all entities created or linked by the user
    // May be empty for new users
    repeated UsersEntity entities = 1;

    // List of all connection types created or linked by the user
    // May be empty for new users
    repeated UsersConnectionType connection_types = 2;

    // List of all property types created or linked by the user
    // May be empty for new users
    repeated UsersPropertyType property_types = 3;
}

// EntityRequest represents a request to create or update an entity.
message EntityRequest {
    // Unique identifier for the entity
    // Format: UUID v4
    // Optional for create operations (server will generate)
    // Required for update operations
    // Example: "123e4567-e89b-12d3-a456-426614174000"
    string id = 1;

    // Name of the entity
    // Maximum length: 255 characters
    // Required field
    // Used for searching and display
    // Example: "John Doe" or "Company XYZ"
    string name = 2;

    // Detailed description of the entity
    // Maximum length: 4096 characters
    // Required field
    // Should provide clear, comprehensive information about the entity
    // Example: "Senior Software Engineer with 10 years of experience..."
    string definition = 3;
}

// UsersEntity represents a user's version of an entity.
message UsersEntity {
    // Name given to the entity by this user
    // Maximum length: 255 characters
    // Example: "John Doe"
    string name = 1;

    // User's definition of the entity
    // Maximum length: 4096 characters
    // Example: "Senior Software Engineer in our team..."
    string definition = 2;

    // ID of the user who created/owns this version
    // Format: UUID v4
    string user_id = 3;

    // ID of the underlying shared entity
    // Format: UUID v4
    string entity_id = 4;
}

// ConnectionTypeRequest represents a request to create a connection type.
message ConnectionTypeRequest {
    // Unique identifier for the connection type
    // Format: UUID v4
    // Optional for create operations (server will generate)
    // Example: "123e4567-e89b-12d3-a456-426614174000"
    string id = 1;

    // Name of the connection type
    // Maximum length: 255 characters
    // Required field
    // Should be descriptive of the relationship
    // Example: "worksAt" or "reportedTo"
    string name = 2;

    // Detailed description of what this connection represents
    // Maximum length: 4096 characters
    // Required field
    // Should clearly explain the meaning of the connection
    // Example: "Represents a current employment relationship between a person and a company"
    string definition = 3;
}

// UsersConnectionType represents a user's version of a connection type.
message UsersConnectionType {
    // Name given to the connection type by this user
    // Maximum length: 255 characters
    string name = 1;

    // User's definition of the connection type
    // Maximum length: 4096 characters
    string definition = 2;

    // ID of the user who created/owns this version
    // Format: UUID v4
    string user_id = 3;

    // ID of the underlying shared connection type
    // Format: UUID v4
    string connection_type_id = 4;
}

// PropertyTypeRequest represents a request to create a property type.
message PropertyTypeRequest {
    // Unique identifier for the property type
    // Format: UUID v4
    // Optional for create operations (server will generate)
    // Example: "123e4567-e89b-12d3-a456-426614174000"
    string id = 1;

    // Name of the property type
    // Maximum length: 255 characters
    // Required field
    // Example: "salary" or "startDate"
    string name = 2;

    // Detailed description of what this property represents
    // Maximum length: 4096 characters
    // Required field
    // Example: "Annual gross salary in USD"
    string definition = 3;

    // Data type for this property
    // Required field
    // Must be one of: "string", "int", "float", "boolean"
    // Example: "float" for salary
    string value_type = 4;
}

// UsersPropertyType represents a user's version of a property type.
message UsersPropertyType {
    // Name given to the property type by this user
    // Maximum length: 255 characters
    string name = 1;

    // User's definition of the property type
    // Maximum length: 4096 characters
    string definition = 2;

    // ID of the underlying shared property type
    // Format: UUID v4
    string property_type_id = 3;

    // ID of the user who created/owns this version
    // Format: UUID v4
    string user_id = 4;

    // Data type for this property
    // One of: "string", "int", "float", "boolean"
    string value_type = 5;
}

// Empty message for requests/responses that don't need any data
message Empty {}

// GraphService provides operations for managing graph-based knowledge representation.
// All operations require authentication via JWT token in the "authorization" metadata.
service GraphService {
    // CreateUser initializes a new user in the graph service.
    // This should only be called by the auth service when a new user registers.
    // 
    // Request body: UserRequest
    // Response: Empty
    //
    // Common error codes:
    // - INVALID_ARGUMENT: If user_id format is invalid
    // - ALREADY_EXISTS: If user already exists
    // - INTERNAL: For server-side errors
    rpc CreateUser(UserRequest) returns (Empty) {}

    // GetUserData retrieves all entities, connection types, and property types
    // associated with the authenticated user.
    // 
    // Request body: Empty
    // Response: UserData
    //
    // Common error codes:
    // - UNAUTHENTICATED: If authentication is missing or invalid
    // - INTERNAL: For server-side errors
    rpc GetUserData(Empty) returns (UserData) {}

    // CreateEntity creates a new entity or links to an existing one.
    // 
    // Request body: EntityRequest
    // Response: UsersEntity
    //
    // Common error codes:
    // - INVALID_ARGUMENT: If name or definition exceed length limits
    // - UNAUTHENTICATED: If authentication is missing or invalid
    // - INTERNAL: For server-side errors
    //
    // Example request:
    // {
    //   "name": "John Doe",
    //   "definition": "Senior Software Engineer at Company XYZ"
    // }
    rpc CreateEntity(EntityRequest) returns (UsersEntity) {}

    // UpdateEntity modifies an existing entity.
    // 
    // Request body: EntityRequest
    // Response: Empty
    //
    // Common error codes:
    // - INVALID_ARGUMENT: If name or definition exceed length limits
    // - NOT_FOUND: If entity doesn't exist
    // - PERMISSION_DENIED: If user doesn't own the entity
    // - UNAUTHENTICATED: If authentication is missing or invalid
    rpc UpdateEntity(EntityRequest) returns (Empty) {}

    // FindEntities searches for entities by exact name match.
    // 
    // Request body: SearchRequest
    // Response: EntitiesList
    //
    // Common error codes:
    // - INVALID_ARGUMENT: If name is empty or too long
    // - UNAUTHENTICATED: If authentication is missing or invalid
    rpc FindEntities(SearchRequest) returns (EntitiesList) {}

    // CreateConnectionType creates a new connection type or links to an existing one.
    // 
    // Request body: ConnectionTypeRequest
    // Response: UsersConnectionType
    //
    // Common error codes:
    // - INVALID_ARGUMENT: If name or definition exceed length limits
    // - UNAUTHENTICATED: If authentication is missing or invalid
    //
    // Example request:
    // {
    //   "name": "worksAt",
    //   "definition": "Indicates current employment relationship"
    // }
    rpc CreateConnectionType(ConnectionTypeRequest) returns (UsersConnectionType) {}

    // FindConnectionTypes searches for connection types by exact name match.
    // 
    // Request body: SearchRequest
    // Response: ConnectionTypesList
    //
    // Common error codes:
    // - INVALID_ARGUMENT: If name is empty or too long
    // - UNAUTHENTICATED: If authentication is missing or invalid
    rpc FindConnectionTypes(SearchRequest) returns (ConnectionTypesList) {}

    // CreatePropertyType creates a new property type or links to an existing one.
    // 
    // Request body: PropertyTypeRequest
    // Response: UsersPropertyType
    //
    // Common error codes:
    // - INVALID_ARGUMENT: If name/definition too long or invalid value_type
    // - UNAUTHENTICATED: If authentication is missing or invalid
    //
    // Example request:
    // {
    //   "name": "salary",
    //   "definition": "Annual gross salary in USD",
    //   "value_type": "float"
    // }
    rpc CreatePropertyType(PropertyTypeRequest) returns (UsersPropertyType) {}

    // FindPropertyTypes searches for property types by exact name match.
    // 
    // Request body: SearchRequest
    // Response: PropertyTypesList
    //
    // Common error codes:
    // - INVALID_ARGUMENT: If name is empty or too long
    // - UNAUTHENTICATED: If authentication is missing or invalid
    rpc FindPropertyTypes(SearchRequest) returns (PropertyTypesList) {}
}