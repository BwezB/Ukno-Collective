// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: api/proto/graph/graph.proto

package graph

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GraphService_CreateUser_FullMethodName           = "/graph.GraphService/CreateUser"
	GraphService_GetUserData_FullMethodName          = "/graph.GraphService/GetUserData"
	GraphService_CreateEntity_FullMethodName         = "/graph.GraphService/CreateEntity"
	GraphService_UpdateEntity_FullMethodName         = "/graph.GraphService/UpdateEntity"
	GraphService_FindEntities_FullMethodName         = "/graph.GraphService/FindEntities"
	GraphService_CreateConnectionType_FullMethodName = "/graph.GraphService/CreateConnectionType"
	GraphService_FindConnectionTypes_FullMethodName  = "/graph.GraphService/FindConnectionTypes"
	GraphService_CreatePropertyType_FullMethodName   = "/graph.GraphService/CreatePropertyType"
	GraphService_FindPropertyTypes_FullMethodName    = "/graph.GraphService/FindPropertyTypes"
)

// GraphServiceClient is the client API for GraphService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// GraphService provides operations for managing the graph data
type GraphServiceClient interface {
	// Get all user's data
	CreateUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*Empty, error)
	GetUserData(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UserData, error)
	// Entity operations
	CreateEntity(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*UsersEntity, error)
	UpdateEntity(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*Empty, error)
	FindEntities(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*EntitiesList, error)
	// ConnectionType operations
	CreateConnectionType(ctx context.Context, in *ConnectionTypeRequest, opts ...grpc.CallOption) (*UsersConnectionType, error)
	FindConnectionTypes(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*ConnectionTypesList, error)
	// PropertyType operations
	CreatePropertyType(ctx context.Context, in *PropertyTypeRequest, opts ...grpc.CallOption) (*UsersPropertyType, error)
	FindPropertyTypes(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*PropertyTypesList, error)
}

type graphServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGraphServiceClient(cc grpc.ClientConnInterface) GraphServiceClient {
	return &graphServiceClient{cc}
}

func (c *graphServiceClient) CreateUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, GraphService_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) GetUserData(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UserData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserData)
	err := c.cc.Invoke(ctx, GraphService_GetUserData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) CreateEntity(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*UsersEntity, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UsersEntity)
	err := c.cc.Invoke(ctx, GraphService_CreateEntity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) UpdateEntity(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, GraphService_UpdateEntity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) FindEntities(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*EntitiesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EntitiesList)
	err := c.cc.Invoke(ctx, GraphService_FindEntities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) CreateConnectionType(ctx context.Context, in *ConnectionTypeRequest, opts ...grpc.CallOption) (*UsersConnectionType, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UsersConnectionType)
	err := c.cc.Invoke(ctx, GraphService_CreateConnectionType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) FindConnectionTypes(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*ConnectionTypesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConnectionTypesList)
	err := c.cc.Invoke(ctx, GraphService_FindConnectionTypes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) CreatePropertyType(ctx context.Context, in *PropertyTypeRequest, opts ...grpc.CallOption) (*UsersPropertyType, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UsersPropertyType)
	err := c.cc.Invoke(ctx, GraphService_CreatePropertyType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) FindPropertyTypes(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*PropertyTypesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PropertyTypesList)
	err := c.cc.Invoke(ctx, GraphService_FindPropertyTypes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GraphServiceServer is the server API for GraphService service.
// All implementations must embed UnimplementedGraphServiceServer
// for forward compatibility.
//
// GraphService provides operations for managing the graph data
type GraphServiceServer interface {
	// Get all user's data
	CreateUser(context.Context, *UserRequest) (*Empty, error)
	GetUserData(context.Context, *Empty) (*UserData, error)
	// Entity operations
	CreateEntity(context.Context, *EntityRequest) (*UsersEntity, error)
	UpdateEntity(context.Context, *EntityRequest) (*Empty, error)
	FindEntities(context.Context, *SearchRequest) (*EntitiesList, error)
	// ConnectionType operations
	CreateConnectionType(context.Context, *ConnectionTypeRequest) (*UsersConnectionType, error)
	FindConnectionTypes(context.Context, *SearchRequest) (*ConnectionTypesList, error)
	// PropertyType operations
	CreatePropertyType(context.Context, *PropertyTypeRequest) (*UsersPropertyType, error)
	FindPropertyTypes(context.Context, *SearchRequest) (*PropertyTypesList, error)
	mustEmbedUnimplementedGraphServiceServer()
}

// UnimplementedGraphServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGraphServiceServer struct{}

func (UnimplementedGraphServiceServer) CreateUser(context.Context, *UserRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedGraphServiceServer) GetUserData(context.Context, *Empty) (*UserData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserData not implemented")
}
func (UnimplementedGraphServiceServer) CreateEntity(context.Context, *EntityRequest) (*UsersEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEntity not implemented")
}
func (UnimplementedGraphServiceServer) UpdateEntity(context.Context, *EntityRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEntity not implemented")
}
func (UnimplementedGraphServiceServer) FindEntities(context.Context, *SearchRequest) (*EntitiesList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindEntities not implemented")
}
func (UnimplementedGraphServiceServer) CreateConnectionType(context.Context, *ConnectionTypeRequest) (*UsersConnectionType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConnectionType not implemented")
}
func (UnimplementedGraphServiceServer) FindConnectionTypes(context.Context, *SearchRequest) (*ConnectionTypesList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindConnectionTypes not implemented")
}
func (UnimplementedGraphServiceServer) CreatePropertyType(context.Context, *PropertyTypeRequest) (*UsersPropertyType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePropertyType not implemented")
}
func (UnimplementedGraphServiceServer) FindPropertyTypes(context.Context, *SearchRequest) (*PropertyTypesList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPropertyTypes not implemented")
}
func (UnimplementedGraphServiceServer) mustEmbedUnimplementedGraphServiceServer() {}
func (UnimplementedGraphServiceServer) testEmbeddedByValue()                      {}

// UnsafeGraphServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GraphServiceServer will
// result in compilation errors.
type UnsafeGraphServiceServer interface {
	mustEmbedUnimplementedGraphServiceServer()
}

func RegisterGraphServiceServer(s grpc.ServiceRegistrar, srv GraphServiceServer) {
	// If the following call pancis, it indicates UnimplementedGraphServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GraphService_ServiceDesc, srv)
}

func _GraphService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GraphService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).CreateUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_GetUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).GetUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GraphService_GetUserData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).GetUserData(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_CreateEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).CreateEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GraphService_CreateEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).CreateEntity(ctx, req.(*EntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_UpdateEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).UpdateEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GraphService_UpdateEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).UpdateEntity(ctx, req.(*EntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_FindEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).FindEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GraphService_FindEntities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).FindEntities(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_CreateConnectionType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectionTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).CreateConnectionType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GraphService_CreateConnectionType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).CreateConnectionType(ctx, req.(*ConnectionTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_FindConnectionTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).FindConnectionTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GraphService_FindConnectionTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).FindConnectionTypes(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_CreatePropertyType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PropertyTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).CreatePropertyType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GraphService_CreatePropertyType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).CreatePropertyType(ctx, req.(*PropertyTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_FindPropertyTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).FindPropertyTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GraphService_FindPropertyTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).FindPropertyTypes(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GraphService_ServiceDesc is the grpc.ServiceDesc for GraphService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GraphService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "graph.GraphService",
	HandlerType: (*GraphServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _GraphService_CreateUser_Handler,
		},
		{
			MethodName: "GetUserData",
			Handler:    _GraphService_GetUserData_Handler,
		},
		{
			MethodName: "CreateEntity",
			Handler:    _GraphService_CreateEntity_Handler,
		},
		{
			MethodName: "UpdateEntity",
			Handler:    _GraphService_UpdateEntity_Handler,
		},
		{
			MethodName: "FindEntities",
			Handler:    _GraphService_FindEntities_Handler,
		},
		{
			MethodName: "CreateConnectionType",
			Handler:    _GraphService_CreateConnectionType_Handler,
		},
		{
			MethodName: "FindConnectionTypes",
			Handler:    _GraphService_FindConnectionTypes_Handler,
		},
		{
			MethodName: "CreatePropertyType",
			Handler:    _GraphService_CreatePropertyType_Handler,
		},
		{
			MethodName: "FindPropertyTypes",
			Handler:    _GraphService_FindPropertyTypes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/graph/graph.proto",
}
